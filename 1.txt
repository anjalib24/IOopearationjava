In Java, input and output streams are used for reading from and writing to data sources like files, network connections, or memory arrays. They are part of Java's I/O (Input/Output) framework found in the `java.io` package.

 Input Stream
An input stream is used to read data from a source. It reads bytes of data and is typically used for reading binary data. The `InputStream` class is the superclass of all classes representing an input stream of bytes.

### Common InputStream Subclasses
1. **FileInputStream**: Reads data from a file.
2. **ByteArrayInputStream**: Reads data from a byte array in memory.
3. **FilterInputStream**: Contains other streams as its underlying source, providing additional functionality (e.g., `BufferedInputStream`).

### Example
```java
import java.io.FileInputStream;
import java.io.IOException;

public class InputStreamExample {
    public static void main(String[] args) {
        try (FileInputStream fis = new FileInputStream("example.txt")) {
            int data;
            while ((data = fis.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

## Output Stream
An output stream is used to write data to a destination. It writes bytes of data and is typically used for writing binary data. The `OutputStream` class is the superclass of all classes representing an output stream of bytes.

### Common OutputStream Subclasses
1. **FileOutputStream**: Writes data to a file.
2. **ByteArrayOutputStream**: Writes data to a byte array in memory.
3. **FilterOutputStream**: Contains other streams as its underlying source, providing additional functionality (e.g., `BufferedOutputStream`).

### Example
```java
import java.io.FileOutputStream;
import java.io.IOException;

public class OutputStreamExample {
    public static void main(String[] args) {
        String data = "Hello, World!";
        try (FileOutputStream fos = new FileOutputStream("example.txt")) {
            fos.write(data.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

## Summary
- **Input Stream**: Reads bytes of data from a source.
- **Output Stream**: Writes bytes of data to a destination.
- Subclasses like `FileInputStream` and `FileOutputStream` are used for file operations.
- They handle byte-level I/O operations, and additional classes like `BufferedInputStream` and `BufferedOutputStream` can improve performance by buffering data.

These streams are fundamental for handling file and network I/O in Java, providing a flexible and powerful way to manage data transfer.