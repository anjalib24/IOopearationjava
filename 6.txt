Serialization in Java is achieved using the `java.io.Serializable` interface and the `ObjectOutputStream` and `ObjectInputStream` classes. Here's a step-by-step explanation of how serialization is accomplished:

## Steps to Achieve Serialization

1. **Implement the Serializable Interface**:
   - The class whose objects need to be serialized must implement the `Serializable` interface. This is a marker interface (it doesn't have any methods) that signals to the Java Virtual Machine (JVM) that objects of this class can be serialized.

2. **Create an ObjectOutputStream**:
   - To serialize an object, you create an instance of `ObjectOutputStream` which writes objects to an underlying stream, such as a file output stream.

3. **Write the Object to the Output Stream**:
   - Use the `writeObject` method of `ObjectOutputStream` to serialize the object and write it to the stream.

4. **Handle Exceptions**:
   - Serialization can throw `IOException` and other exceptions, so proper exception handling should be implemented.

### Example

Here is an example demonstrating serialization in Java:

#### Step 1: Define a Serializable Class

```java
import java.io.Serializable;

public class Person implements Serializable {
    private static final long serialVersionUID = 1L; // Unique identifier for this class
    
    private String name;
    private int age;
    private transient String password; // This field will not be serialized
    
    public Person(String name, int age, String password) {
        this.name = name;
        this.age = age;
        this.password = password;
    }
    
    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + "', password='" + password + "'}";
    }
}
```

#### Step 2: Serialize the Object

```java
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class SerializeExample {
    public static void main(String[] args) {
        Person person = new Person("John Doe", 30, "secret");

        try (FileOutputStream fileOut = new FileOutputStream("person.ser");
             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {
            out.writeObject(person);
            System.out.println("Serialized data is saved in person.ser");
        } catch (IOException i) {
            i.printStackTrace();
        }
    }
}
```

### Explanation of the Example

1. **Person Class**:
   - The `Person` class implements `Serializable`. It has fields `name`, `age`, and `password`. The `password` field is marked as `transient`, so it will not be included in the serialization process.

2. **SerializeExample Class**:
   - In the `SerializeExample` class, a `Person` object is created.
   - A `FileOutputStream` is created to specify the file `person.ser` where the serialized object will be saved.
   - An `ObjectOutputStream` is created to handle the serialization.
   - The `writeObject` method of `ObjectOutputStream` serializes the `Person` object and writes it to `person.ser`.

### Serialization Process

1. **Object State**: The state of the object is captured, including all non-transient and non-static fields.
2. **Byte Stream**: The object state is converted into a byte stream.
3. **Output Stream**: The byte stream is written to the specified output, such as a file or network socket.

By following these steps and using the `Serializable` interface along with `ObjectOutputStream`, you can serialize objects in Java, making it easy to save and transmit object states.